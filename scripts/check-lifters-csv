#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Simple check script for lifters.csv files.
# Used as part of "make check".
#
# Makes sure that:
#
# 1) All the column names are expected.
# 2) Each column's data are in expected formats for that column type.
#

import os
import sys
import wilks

def redden(s):
    return "\033[1;31m" + s + "\033[0;m"

def enyellow(s):
    return "\033[1;33m" + s + "\033[0;m"

globalFilename = ''
havePrintedFilename = False

def reset_filename_state(filename):
    global globalFilename
    global havePrintedFilename
    globalFilename = filename
    havePrintedFilename = False

def print_filename_once():
    # This completely breaks the main() abstraction, but whatever.
    global havePrintedFilename
    if not havePrintedFilename:
        print(globalFilename, file=sys.stderr)
        havePrintedFilename = True

def perror(s):
    print_filename_once()
    print(' ' + redden(s), file=sys.stderr)

def pwarning(s):
    print_filename_once()
    print(' ' + enyellow(s), file=sys.stderr)


def is_int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False


def check_column_name(s):
    if '  ' in s:
        pwarning("Too much spacing for name: \"%s\"" % s)

    # Disallow " in all circumstances: we already have to allow ',
    # so just use that for quotes.
    special_legal_chars = ' \'.-'

    if 'Jr.' in s or 'Sr.' in s:
        perror("Junior/Senior in names must standardize on no period: \"%s\"" % s)

    k = s.split()
    if k[-1] == 'JR' or k[-1] == 'jr' or k[-1] == 'SR' or k[-1] == 'sr':
        perror("Junior/Senior in names must be capitalized like 'Jr': \"%s\"" % s)

    # This only works for names written in English, but that's OK for now.
    has_illegal_char = False
    for c in s:
        if not c.isalpha() and not c in special_legal_chars:
            has_illegal_char = True
            break
    if has_illegal_char:
        perror("Name contains illegal character(s): \"%s\"" % s)


def check_column_sex(s):
    if s != "M" and s != "F":
        perror("Unknown sex: %s" % s)


def check_column_age(s):
    try:
        age = int(s)
        if age < 8: # USPA actually let some 8 year olds compete...
            pwarning("Age unexpectedly low: %s" % s)

    except ValueError:
        perror("Age is not a number: %s" % s)


def check_column_place(s):
    if not s in ['DQ', 'NS', 'G']:
        try:
            int(s)
        except ValueError:
            perror("Place is not an integer or known exception: %s" % s)


def check_column_event(s):
    found_illegal_char = False
    for c in s:
        if not c in "SBD":
            found_illegal_char = True

        if "SBD".count(c) >= 2:
            perror("Duplicate event character: %s" % s)

    if found_illegal_char:
        perror("Unknown event type: %s" % s)


def check_column_division(s):
    if s.strip() != s or '  ' in s:
        pwarning("Too much spacing for division: \"%s\"" % s)

    if '"' in s:
        perror("Illegal use of quote in division: %s" % s)

    low = s.lower()

    if 'raw' in low or 'single' in low or 'multi' in low or 'classic' in low:
        pwarning('Division includes equipment: "%s"' % s)

    if is_int(s.split()[0]) or 'SHW' in s or '+' in s.split()[0]:
        pwarning('Division includes weight class: "%s"' % s)

    if s[-1] is '-':
        pwarning('Division ends in "-": "%s"' % s)


def check_column_equipment(s):
    if not s in ['Raw', 'Wraps', 'Single-ply', 'Multi-ply']:
        perror("Unknown equipment value: \"%s\"" % s)


def check_lift_column(s):
    try:
        float(s)
    except ValueError:
        perror("Invalid lift quantity: %s" % s)


def check_positive_number_column(s):
    try:
        f = float(s)
        if f < 0.0:
            perror("Field cannot be negative: %s" % s)
    except ValueError:
        perror("Invalid field quantity: %s" % s)


def check_column_birthyear(s):
    if len(s) != 4:
        perror("BirthYear must be 4 digits: '%s'" % s)
    elif not s.isdigit():
        perror("BirthYear must be digits: '%s'" % s)
    elif s[0] != '1' and s[0] != '2':
        pwarning("BirthYear looks implausible: '%s'" % s)


def check_column_weightclass(s):
    if s[-1] is '+':
        s = s[:-1]
    check_positive_number_column(s)

    try:
        f = float(s)
        if f < 30: # Nobody should weigh this little.
            pwarning("Suspiciously low weight class: %s" % s)
    except ValueError:
        pass


def check_column_state(s):
    if '  ' in s:
        pwarning("Too much spacing in state: \"%s\"" % s)

    for c in s:
        if not c.isalpha() and not c.isspace():
            perror("Invalid character in state: \"%s\"" % s)
            break

def ignore_column(s):
    pass


HeaderHandlers = {
    'Name': check_column_name,
    'Sex': check_column_sex,
    'Age': check_column_age,
    'Place': check_column_place,
    'Event': check_column_event,
    'Division': check_column_division,
    'Equipment': check_column_equipment,

    # Temporary column for IPF, to be calculated as Age during compilation.
    'BirthYear': check_column_birthyear,

    # Stat columns. Only Kg is valid.
    'WeightClassKg': check_column_weightclass,
    'BodyweightKg': check_positive_number_column,
    'Wilks': check_positive_number_column,

    # Lift columns. Only Kg is valid.
    'BestSquatKg': check_lift_column,
    'Squat1Kg': check_lift_column,
    'Squat2Kg': check_lift_column,
    'Squat3Kg': check_lift_column,
    'Squat4Kg': check_lift_column,

    'BestBenchKg': check_lift_column,
    'Bench1Kg': check_lift_column,
    'Bench2Kg': check_lift_column,
    'Bench3Kg': check_lift_column,
    'Bench4Kg': check_lift_column,

    'BestDeadliftKg': check_lift_column,
    'Deadlift1Kg': check_lift_column,
    'Deadlift2Kg': check_lift_column,
    'Deadlift3Kg': check_lift_column,
    'Deadlift4Kg': check_lift_column,

    'TotalKg': check_positive_number_column,

    # Columns that we don't really care about.
    'State': check_column_state,

    # Columns that we totally ignore but aren't bad to keep around.
    'Team': ignore_column,
    'Country-State': ignore_column,
    'Country': ignore_column,
    'College/University': ignore_column,
    'School': ignore_column,
    'Category': ignore_column,
}

KnownHeaders = HeaderHandlers.keys()


def check_headers(headers):
    if not 'Name' in headers:
        perror('The "Name" column is missing.')

    if not 'BodyweightKg' in headers and not 'WeightClassKg' in headers:
        perror('There must be a BodyweightKg or WeightClassKg column.')

    if not 'Sex' in headers:
        perror('There must be a Sex column.')

    if not 'Equipment' in headers:
        perror('There must be an Equipment column.')

    if 'Wilks' in headers and not 'TotalKg' in headers:
        perror('Wilks requires a TotalKg column.')
    if 'Wilks' in headers and not 'BodyweightKg' in headers:
        perror('Wilks requires a BodyweightKg for exact bodyweight.')

    # Not requiring the Event header yet, although it's probably a good idea.
    #if not 'Event' in headers:
    #    perror('There must be an Event column.')

    for header in headers:
        if not header in KnownHeaders:
            pwarning("Unknown column header: %s" % header)

        if headers.count(header) > 1:
            perror("Duplicate column header: %s" % header)

        # If lift data is present, we need a corresponding 'Best' column.
        if 'Squat' in header and not 'BestSquatKg' in headers:
            pwarning('Squat data present, but missing BestSquatKg')
        if 'Bench' in header and not 'BestBenchKg' in headers:
            pwarning('Bench data present, but missing BestBenchKg')
        if 'Deadlift' in header and not 'BestDeadliftKg' in headers:
            pwarning('Deadlift data present, but missing BestDeadliftKg')


def check_row_name_consistency(row, headers):
    if 'Name' in headers:
        name = row[headers.index('Name')]
        if name is '':
            perror("Name field empty.")


# Assert that Event makes sense given the specified lifts.
def check_row_event_consistency(row, headers):
    if 'Event' in headers:
        event = row[headers.index('Event')]

        if 'S' not in event:
            for i, header in enumerate(headers):
                if 'Squat' in header and row[i]:
                    perror("Squat entered for non-squat Event.")

        if 'B' not in event:
            for i, header in enumerate(headers):
                if 'Bench' in header and row[i]:
                    perror("Bench entered for non-bench Event.")

        if 'D' not in event:
            for i, header in enumerate(headers):
                if 'Deadlift' in header and row[i]:
                    perror("Deadlift entered for non-deadlift Event.")


# Women shouldn't accidentally be given male SHW classes.
def check_row_weightclass_consistency(row, headers):
    if not 'Sex' in headers or not 'WeightClassKg' in headers:
        return

    if row[headers.index('Sex')] is not 'F':
        return

    wtcls = row[headers.index('WeightClassKg')].replace('+','')
    if not wtcls:
        return

    # No female category should be this high.
    try:
        number = float(wtcls)
        # This is probably higher than it should be because some USPA
        # meets put women in male weightclasses for no reason.
        if number > 110:
            pwarning("Suspiciously high female weightclass: %s" % row[headers.index('WeightClassKg')])
    except ValueError:
        pass


def check_row_total_consistency(row, headers):
    if not 'TotalKg' in headers:
        return

    def float2(s):
        if s == '':
            return 0.0
        return float(s)

    total = float2(row[headers.index('TotalKg')])
    squat = float2(row[headers.index('BestSquatKg')]) if 'BestSquatKg' in headers else 0
    bench = float2(row[headers.index('BestBenchKg')]) if 'BestBenchKg' in headers else 0
    deadl = float2(row[headers.index('BestDeadliftKg')]) if 'BestDeadliftKg' in headers else 0

    if total < 0 or squat < 0 or bench < 0 or deadl < 0:
        return # Lifter bombed out of the meet.

    if total == 0:
        return # Disqualified, didn't finish the meet, etc.

    # Most federations round to 0.01, so rounding errors get introduced.
    # Only flag the ones that are obviously wrong, otherwise, believe the federation.
    if squat + bench + deadl == 0:
        return # Ignore that one RUPC meet that forgot to record what people lifted.
    if abs(squat + bench + deadl - total) > 0.5:
        perror("Total error: Calculated %f, but meet says %f" % (squat+bench+deadl, total))


# Federations calculate Wilks themselves, but have errors.
# From stupid things like using the wrong units.
def check_row_wilks_consistency(row, headers):
    if not 'Wilks' in headers:
        return
    if not 'BodyweightKg' in headers:
        return
    if not 'TotalKg' in headers:
        return
    if not 'Sex' in headers:
        return

    def float2(s):
        if s == '':
            return 0.0
        return float(s)

    total = float2(row[headers.index('TotalKg')])
    bodyweight = float2(row[headers.index('BodyweightKg')])
    sex = row[headers.index('Sex')]
    score = float2(row[headers.index('Wilks')])

    if score > 0:
        if total <= 0:
            perror("Wilks given but missing TotalKg in row.")
        if bodyweight <= 0:
            perror("Wilks given but missing BodyweightKg in row.")
        if sex == '':
            perror("Wilks given but missing Sex in row.")

    if total <= 0 or bodyweight <= 0 or sex == '' or score <= 0:
        return

    calculated_score = wilks.wilks(sex == 'M', bodyweight, total)

    # Federations induce a lot of rounding error, so believe them unless
    # it's pretty egregiously wrong.
    if abs(calculated_score - score) > 0.5:
        perror("Wilks error: Calculated %f, but meet says %f" % (calculated_score, score))


def check_row(row, headers):
    check_row_name_consistency(row, headers)
    check_row_event_consistency(row, headers)
    check_row_weightclass_consistency(row, headers)
    check_row_total_consistency(row, headers)
    check_row_wilks_consistency(row, headers)

    # Check individual cell values in isolation.
    for i, text in enumerate(row):
        if text.strip() != text:
            perror("Extraneous whitespace for %s in row %s" % (text, ','.join(row)))

        if text and headers[i] in KnownHeaders:
            HeaderHandlers[headers[i]](text)


def check(scriptname, filename):
    # Pretty-printer helper (so we only print the name once).
    reset_filename_state(filename)

    with open(filename) as fd:
        csv = [x.strip().split(',') for x in fd.readlines()]

    headers = csv[0]
    check_headers(headers)

    for row in csv[1:]:
        if len(row) != len(headers):
            perror("Column count mismatch for row: %s" % ','.join(row))
            continue

        check_row(row, headers)


if __name__ == '__main__':
    # If arguments are provided, check only those files.
    if len(sys.argv) > 1:
        for f in sys.argv[1:]:
            check(sys.argv[0], f)

    # Otherwise, check every file named lifters.csv in the dirtree,
    # which is much faster than using `find -exec`.
    else:
        for dirname, subdirs, files in os.walk(os.getcwd()):
            if 'lifters.csv' in files:
                lifterspath = dirname + os.sep + 'lifters.csv'
                check(sys.argv[0], lifterspath)
