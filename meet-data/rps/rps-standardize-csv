#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Standardize the results.csv to the OpenPowerlifting
# internal format.
#

import sys
from oplcsv import Csv


def error(msg):
    print("Error: %s" % msg, file=sys.stderr)
    sys.exit(1)


def strip_whitespace(csv):
    for i,x in enumerate(csv.fieldnames):
        csv.fieldnames[i] = x.strip().replace('  ',' ')

    for row in csv.rows:
        for i,x in enumerate(row):
            row[i] = x.strip().replace('  ',' ')


def remove_empty_rows(csv):
    def getemptyidx(csv):
        for i,row in enumerate(csv.rows):
            if ''.join(row) == '':
                return i
        return -1

    while True:
        idx = getemptyidx(csv)
        if idx == -1:
            return
        del csv.rows[idx]


def remove_stars(csv):
    for row in csv.rows:
        for i,x in enumerate(row):
            row[i] = x.replace('*','')


def remove_zeros(csv):
    for row in csv.rows:
        for i,x in enumerate(row):
            # The CSV conversion via LibreOffice already standardized
            # all decimal forms of 0.00 and such to just '0'.
            if x == '0':
                row[i] = ''


def standardize_fieldnames(csv):
    for i,x in enumerate(csv.fieldnames):
        s = x.lower()
        if s == 'gender':
            x = 'Sex'
        elif s == 'class':
            x = 'Class' # TODO: What to do with this
        elif s == 'eq division':
            x = 'Equipment'
        elif s == 'age division':
            x = 'Division'
        elif s == 'wt':
            x = 'WeightClassLBS'
        elif s == 'name':
            x = 'Name'
        elif s == 'actual bwt.' or s == 'acutal b/w' or s == 'bwt':
            x = 'BodyweightLBS'
        elif s == 'squat':
            x = 'BestSquatLBS'
        elif s == 'bench':
            x = 'BestBenchLBS'
        elif s == 'deadlift':
            x = 'BestDeadliftLBS'
        elif s == 'total':
            x = 'TotalLBS'
        elif s == 'place':
            x = 'Place'

        elif s == 'squat4lbs':
            x = 'Squat4LBS'
        elif s == 'bench4lbs':
            x = 'Bench4LBS'
        elif s == 'deadlift4lbs':
            x = 'Deadlift4LBS'

        elif s == 'sex':
            x = 'Sex'
        elif s == 'class':
            x = 'Class'
        elif s == 'equipment':
            x = 'Equipment'
        elif s == 'division':
            x = 'Division'
        elif s == 'weightclasslbs':
            x = 'WeightClassLBS'
        elif s == 'bestsquatkg':
            x = 'BestSquatKg'
        elif s == 'bestbenchkg':
            x = 'BestBenchKg'
        elif s == 'bestdeadliftkg':
            x = 'BestDeadliftKg'
        elif s == 'totalkg':
            x = 'TotalKg'
        elif s == 'squat4kg':
            x = 'Squat4Kg'
        elif s == 'bench4kg':
            x = 'Bench4Kg'
        elif s == 'deadlift4kg':
            x = 'Deadlift4Kg'
        elif s == 'state':
            x = 'State'
        else:
            error("Teach me what to do with column '%s'" % x)

        csv.fieldnames[i] = x


def fixequipment(csv):
    idx = csv.fieldnames.index('Equipment')
    if idx < 0:
        error("No Equipment column in fixequipment().")

    for row in csv.rows:
        s = row[idx].lower()
        # "Classic" means belt and wrist wraps only to the RPS.
        if s == 'raw classic' or s == 'raw clas':
            x = 'Raw'
        # "Modern" allows wraps and sleeves for the squat and maybe the deadlift.
        # They track rankings for sleeves independently, but don't mark that anywhere.
        elif s == 'raw modern' or s == 'raw mod':
            x = 'Wraps'
        elif s == 'single-ply' or s == 'single ply':
            x = 'Single-ply'
        elif s == 'multi-ply' or s == 'mulit-ply' or s == 'multi ply':
            x = 'Multi-ply'

        # This is used for benchers who have to choose between Raw or Wraps.
        # Seriously, though, what the hell?
        elif s == 'no choice made':
            x = 'Wraps'

        else:
            error("Teach fixequipment() what to do with '%s'" % s)

        row[idx] = x


def fixsex(csv):
    idx = csv.fieldnames.index('Sex')
    if idx < 0:
        error("No Sex column in fixsex().")

    for row in csv.rows:
        s = row[idx].lower()
        if s == 'male':
            x = 'M'
        elif s == 'female':
            x = 'F'
        else:
            error("Teach fixsex() what to do with '%s'" % s)

        row[idx] = x


def fixname(csv):
    idx = csv.fieldnames.index('Name')
    if idx < 0:
        error("No Name column in fixname().")

    for row in csv.rows:
        s = row[idx]
        s = s.replace('Jr.','Jr')
        s = s.replace('Sr.','Sr')

        # RPS uses this to look fancy in names like O'Brien.
        s = s.replace("â€™","'")

        if s.upper() == s:
            error("Name looks all uppercase, needs manual fixing: '%s'" % s )

        for x in s.split():
            if x.lower() == x or s.upper() == s:
                error("Name needs proper casing: '%s'" % s)

        row[idx] = s


def fixclass(csv):
    idx = csv.fieldnames.index('Class')
    if idx < 0:
        error("No Class column in fixclass().")

    for row in csv.rows:
        s = row[idx].lower()
        if s == 'pro':
            x = 'Pro'
        elif s == 'am':
            x = 'Amateur'
        elif s == 'elite':
            x = 'Elite'
        elif s == 'military am':
            x = 'Military Amateur'
        elif s == 'mil am':
            x = 'Military Amateur'
        elif s == 'police am':
            x = 'Police Amateur'
        elif s == 'police pro' or s == 'polce pro':
            x = 'Police Pro'
        elif s == 'military pro':
            x = 'Military Pro'
        elif s == 'crossfit':
            x = 'Crossfit'
        else:
            error("Teach fixclass() what to do with '%s'" % s)

        row[idx] = x


def fixweightclass(csv):
    idx = csv.fieldnames.index('WeightClassLBS')
    if idx < 0:
        error("No WeightClassLBS column in fixweightclass().")
    sexidx = csv.fieldnames.index('Sex')
    if sexidx < 0:
        error("No Sex column in fixweightclass().")

    for row in csv.rows:
        if row[idx].lower() == 'shw':
            if row[sexidx] == 'M':
                row[idx] = '308+'
            elif row[sexidx] == 'F':
                row[idx] = '198+'
            else:
                error("Unknown sex in fixweightclass(): '%s'" % s)


def isnumber(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


def fixplace(csv):
    idx = csv.fieldnames.index('Place')
    if idx < 0:
        error("No Place column in fixplace().")

    for row in csv.rows:
        x = row[idx]
        x = x.replace('pl','')
        x = x.replace('st','')
        x = x.replace('nd','')
        x = x.replace('rd','')
        x = x.replace('th','')
        x = x.strip()

        if not isnumber(x) and x != 'DQ':
            error("Unknown place in fixplace(): '%s'" % s)

        row[idx] = x


def fixlift(csv, liftfield):
    idx = csv.fieldnames.index(liftfield)
    if idx < 0:
        error("No %s column in fixlift()." % liftfield)

    # Get rid of things like 'bomb' and 'no lift'.
    for row in csv.rows:
        if not isnumber(row[idx]):
            row[idx] = ''


def mergeclassintodivision(csv):
    classidx = csv.fieldnames.index('Class')
    if classidx < 0:
        error("No Class column in mergeclassintodivision().")
    dividx = csv.fieldnames.index('Division')
    if dividx < 0:
        error("No Division column in mergeclassintodivision().")

    for row in csv.rows:
        x = "%s %s" % (row[classidx], row[dividx])
        row[dividx] = x.strip()

    csv.remove_column_by_index(classidx)


def main(filename):
    csv = Csv(filename)

    strip_whitespace(csv)
    remove_empty_rows(csv)
    remove_stars(csv)
    remove_zeros(csv)
    standardize_fieldnames(csv)

    if not 'Name' in csv.fieldnames:
        error("Couldn't find a name column.")
    if not 'Equipment' in csv.fieldnames:
        error("Couldn't find an equipment column.")
    if not 'Sex' in csv.fieldnames:
        error("Couldn't find a sex column.")

    fixequipment(csv)
    fixsex(csv)
    fixname(csv)
    fixclass(csv)

    # Depends on fixsex(), since it needs sex information for SHWs.
    if 'WeightClassLBS' in csv.fieldnames:
        fixweightclass(csv)

    # Depends on fixclass(), since it merges class into division.
    if 'Class' in csv.fieldnames and 'Division' in csv.fieldnames:
        mergeclassintodivision(csv)

    for f in csv.fieldnames:
        if 'Squat' in f or 'Bench' in f or 'Deadlift' in f or 'Total' in f:
            fixlift(csv, f)

    if 'Place' in csv.fieldnames:
        fixplace(csv)

    csv.write(sys.stdout)

        

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(" Usage: %s results.csv" % sys.argv[0], file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1])
