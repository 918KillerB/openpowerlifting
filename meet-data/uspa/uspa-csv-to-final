#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Given a CSV in PDF format, parse it to extract information
# in the OpenPowerlifting internal format.
#

import sys


def error(text):
    print("Error: %s" % text, file=sys.stderr)
    sys.exit(1)


def isint(str):
    try:
        int(str)
        return True
    except ValueError:
        return False


def fixcolnames(columns):
    for i, name in enumerate(columns):
        low = name.lower()

        if low == 'name':
            columns[i] = 'Name'
        elif low == 'place':
            columns[i] = 'Place'
        elif low == 'division':
            columns[i] = 'Division'
        elif low == 'state':
            columns[i] = 'State'
        elif low == 'wt class': # Sometimes lbs, sometimes kg, sigh.
            columns[i] = 'WeightClassKg'
        elif low == 'bdy wt(kg)':
            columns[i] = 'BodyweightKg'
        elif low == 'wght( kg)':
            columns[i] = 'BodyweightKg'
        elif low == 'bdy wght':
            columns[i] = 'BodyweightLBS'
        elif low == 'age':
            columns[i] = 'Age'
        elif low == 'squat, kg':
            columns[i] = 'BestSquatKg'
        elif low == 'squat lbs':
            columns[i] = 'BestSquatLBS'
        elif low == 'bench, kg':
            columns[i] = 'BestBenchKg'
        elif low == 'bench lbs':
            columns[i] = 'BestBenchLBS'
        elif low == 'deadlift kg':
            columns[i] = 'BestDeadliftKg'
        elif low == 'deadlift lbs':
            columns[i] = 'BestDeadliftLBS'
        elif low == 'total, kg':
            columns[i] = 'TotalKg'
        elif low == 'total lbs':
            columns[i] = 'TotalLBS'
        elif low == 'wilks score':
            columns[i] = 'Wilks'
        else:
            error("Unknown column %s" % name)


def colnameto4thname(colname):
    if colname == 'BestSquatKg':
        return 'Squat4Kg'
    elif colname == 'BestSquatLBS':
        return 'Squat4LBS'
    elif colname == 'BestBenchKg':
        return 'Bench4Kg'
    elif colname == 'BestBenchLBS':
        return 'Bench4LBS'
    elif colname == 'BestDeadliftKg':
        return 'Deadlift4Kg'
    elif colname == 'BestDeadliftLBS':
        return 'Deadlift4LBS'
    else:
        error("Don't know how to make 4th column out of %s" % colname)


def add4thcolumns(columns, csv):
    for row in csv:
        for col, text in enumerate(row):
            if '4th' in text.lower():
                colname = columns[col]
                newcol = colnameto4thname(colname)

                if not newcol in columns:
                    columns.append(newcol)


def parse(csv):
    columns = csv[0]
    assert columns[0].lower() == 'place'
    assert columns[1].lower() == 'name'

    fixcolnames(columns)

    if not 'Sex' in columns:
        columns.append('Sex')
    if not 'Division' in columns:
        columns.append('Division')
    if not 'Equipment' in columns:
        columns.append('Equipment')

    # Are there any 4th attempts? Then we'll need even more columns.
    add4thcolumns(columns, csv)

    # Expand every row of the csv to have the right number of columns.
    ncols = len(columns)
    for row in csv:
        while len(row) < len(columns):
            row.append('')

    # This is the final CSV-like array-of-arrays we're building up below.
    rval = [columns]

    divisionstate = None
    sexstate = None
    equipmentstate = None
    lifterstate = None

    # Alright, we have all the columns we'll need set up!
    # Time to start running the state machine!
    for row in csv:
        # Column information: we already got that.
        if row[0] == 'Place':
            pass

        # If the first position is filled in, it has place information.
        elif row[0] != '':
            # Maybe USPA stopped using NA and NS? That would be nice.
            assert isint(row[0]) or row[0].lower() == 'dq'

            # Insert the stateful information into the row.
            divisioncol = columns.index('Division')
            sexcol = columns.index('Sex')
            equipmentcol = columns.index('Equipment')

            if not row[divisioncol]:
                assert divisionstate
                row[divisioncol] = divisionstate
            if not row[sexcol]:
                assert sexstate
                row[sexcol] = sexstate
            if not row[equipmentcol]:
                assert equipmentstate
                row[equipmentcol] = equipmentstate

            rval.append(row)

            # Remember the last lifter processed in case we have to add 4th attempts.
            lifterstate = row

        # If the first position is blank, this is state information, 4th attempts, or garbage.
        else:
            searcher = ';'.join(row).lower()
            # Sometimes the rows just switch the sex state.
            if ';women;' in searcher:
                sexstate = 'F'
            elif ';men;' in searcher:
                sexstate = 'M'

            # This is a row that specifies 4th attempts for the last lifter.
            elif '4th' in searcher:
                assert lifterstate

                for i, text in enumerate(row):
                    text = text.lower()
                    if '4th' in text:
                        amount = text.replace('4th-','').strip()
                        amount = text.replace('4th','').strip()
                        newcol = colnameto4thname(columns[i])
                        assert newcol in columns

                        newcolidx = columns.index(newcol)
                        lifterstate[newcolidx] = amount

            # This is a row that specifies division and other information.
            elif 'open' in searcher or 'junior' in searcher or 'master' in searcher:
                # If this is division information, it disregards columns.
                info = ' '.join(row).strip().lower()

                # Divisions are {Junior, Open, Submaster, Master} +
                #  {Women, Men} + (Age Range if non-Open)
                if not 'junior' in info and not 'open' in info and not 'master' in info:
                    continue

                # Get the sex state.
                if 'women' in info:
                    sexstate = 'F'
                elif 'men' in info:
                    sexstate = 'M'

                # Get the division state.
                # Normally looks like: "52kg/114 Junior Men 13-15 Classic Raw"
                # and we want from that: "Junior 13-15"
                if '-' in info: 
                    # Extract 20-23, but don't extract "sub-master".
                    k = [x for x in info.split() if '-' in x and x[0].isdigit()]
                    assert len(k) == 1
                    agerange = ' ' + k[0].replace(',','')
                else:
                    agerange = ''

                if 'open' in info:
                    divisionstate = 'Open' + agerange
                elif 'submaster' in info:
                    divisionstate = 'Submaster' + agerange
                elif 'junior' in info:
                    divisionstate = 'Junior' + agerange
                elif 'master' in info:
                    divisionstate = 'Master' + agerange
                else:
                    error('Unknown division: %s' % ' '.join(row).strip())

                # Get the equipment state.
                if 'classic' in info:
                    equipmentstate = 'Wraps'
                elif 'raw' in info:
                    equipmentstate = 'Raw'
                elif 'single' in info:
                    equipmentstate = 'Single-ply'
                elif 'multi' in info:
                    equipmentstate = 'Multi-ply'

    return rval


# USPA SHW weightclasses are 140+ for men, 90+ for women.
def fixshw(rows):
    weightclassidx = rows[0].index('WeightClassKg')
    assert weightclassidx >= 0

    sexidx = rows[0].index('Sex')
    assert sexidx >= 0

    for row in rows[1:]:
        if row[weightclassidx] == 'SHW':
            if row[sexidx] == 'M':
                row[weightclassidx] = '140+'
            else:
                row[weightclassidx] = '90+'


# Remove a LBS column if there is a matching Kg column.
# Needs to be very careful, since it's deleting data!
def removeredundantlbs(rows):
    cols = list([col for col in rows[0] if 'LBS' in col])
    for col in cols:
        if col.replace('LBS','Kg') in rows[0]:
            i = rows[0].index(col)
            for row in rows:
                del row[i]


def main():
    with open(sys.argv[1]) as fd:
        csv = [[y.strip() for y in x.split(';')] for x in fd.readlines()]
    rval = parse(csv)

    # Fixups.
    fixshw(rval)
    removeredundantlbs(rval)

    # Sometimes commas get snuck into numbers, like "1,036.16". Sigh.
    # Also get rid of quotation marks, since the JS doesn't like that.
    for row in rval:
        for i, word in enumerate(row):
            row[i] = word.replace('"','\'')
            row[i] = word.replace(',','')

    # Print, and also fix up some common errors.
    for row in rval:
        k = ','.join(row)
        k = k.replace(',O,', ',0,')
        k = k.replace(',DQ,', ',,') # Doesn't affect the Place, which is in the first col.
        print(k)


if __name__ == '__main__':
    main()
