#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Generates a static table of meet information.
#

import bisect
import html
import oplcsv
import sys

LIFTERSCSV = '../build/openpowerlifting.csv'
MEETCSV = '../build/meets.csv'


# Gets some row that contains the given meetid, using a super ham-fisted binary search.
def findsomelifterin(meetid, lifterscsv):
    meetidx = lifterscsv.fieldnames.index('MeetID')
    rows = lifterscsv.rows

    meetid = int(meetid)

    x = int(len(rows) / 2)
    step = int(len(rows) / 4)
    while int(rows[x][meetidx]) != meetid:
        if int(rows[x][meetidx]) < meetid:
            x = x + step
        else:
            x = x - step

        # In edge cases, just keep stepping by one. It's fast enough.
        step = max(1, int(step / 2))
        
    return x


# Knowing that the lifterscsv rows are in sorted order by MeetID,
# perform a binary search and expand to grab nearby rows.
def getliftersfor(meetid, lifterscsv):
    meetidx = lifterscsv.fieldnames.index('MeetID')

    # Bisect to find one of the lifters.
    x = findsomelifterin(meetid, lifterscsv)

    # The rest of the lifters are above and below that one.
    # Find the lowest and highest indices for lifters in this meet, inclusive.
    lowest = x
    while lowest > 0:
        if lifterscsv.rows[lowest-1][meetidx] != meetid:
            break
        lowest = lowest - 1

    highest = x
    while highest < len(lifterscsv.rows) - 1:
        if lifterscsv.rows[highest+1][meetidx] != meetid:
            break
        highest = highest + 1

    return lifterscsv.rows[lowest : highest + 1]


def getmonth(m):
    if m == '01': return 'January'
    if m == '02': return 'February'
    if m == '03': return 'March'
    if m == '04': return 'April'
    if m == '05': return 'May'
    if m == '06': return 'June'
    if m == '07': return 'July'
    if m == '08': return 'August'
    if m == '09': return 'September'
    if m == '10': return 'October'
    if m == '11': return 'November'
    if m == '12': return 'December'
    return ''


def makemeeturl(fed, date, meetname):
    fed = html.escape(fed)
    date = html.escape(date)
    meetname = html.escape(meetname)
    return 'meet.html?f=%s&d=%s&n=%s' % (fed, date, meetname)


def main():
    csv = oplcsv.Csv(MEETCSV)

    meetidx = csv.fieldnames.index('MeetID')
    fedidx = csv.fieldnames.index('Federation')
    dateidx = csv.fieldnames.index('Date')
    countryidx = csv.fieldnames.index('MeetCountry')
    stateidx = csv.fieldnames.index('MeetState')
    townidx = csv.fieldnames.index('MeetTown')
    meetnameidx = csv.fieldnames.index('MeetName')

    # By default, sort the list by date, most recent meets first.
    csv.rows = sorted(csv.rows, key=lambda x : x[dateidx], reverse=True)

    lifters = oplcsv.Csv(LIFTERSCSV)
    liftersmeetidx = lifters.fieldnames.index('MeetID')
    lifterswilksidx = lifters.fieldnames.index('Wilks')
    liftersnameidx = lifters.fieldnames.index('Name')

    columns = ["Federation", "Date", "Location", "Town", "Name", "Lifters",
               "Best Lifter", "Best Wilks"]

    print('<table>')

    print('<thead><tr>')
    for c in columns:
        print('<td>%s</td>' % c)
    print('</tr></thead>')

    print('<tbody>')
    lastmonth = ''

    for row in csv.rows:
        # How many lifters competed?
        results = getliftersfor(row[meetidx], lifters)
        results = sorted(results, key=lambda x : float(x[lifterswilksidx] or 0.0), reverse=True)

        # TODO: Might need Best Raw (incl/wraps) / Best Geared (incl/multi).

        # Lifters who entered multiple events should only count once.
        names = []
        for k in results:
            if not k[liftersnameidx] in names:
                names.append(k[liftersnameidx])

        location = row[countryidx]
        if row[stateidx]:
            location = "%s-%s" % (row[countryidx], row[stateidx])

        bestlifter = results[0][liftersnameidx]
        bestwilks = results[0][lifterswilksidx]
        if not bestwilks:
            lifterhtml = ''
        else:
            lifterhtml = '<a href="lifters.html?q=%s">%s</a>' % (bestlifter, bestlifter)

        # If the month changed, emit a header row.
        date = row[dateidx]
        yrm = date[0:date.rindex('-')]
        # Don't emit the first divider since it looks weird cutting off the headers.
        if lastmonth != '' and lastmonth != yrm:
            [year,month] = yrm.split('-')
            print('<tr><td colspan="%d" class="table-divider">%s %s</td></tr>' % (len(columns), getmonth(month), year))
            lastmonth = yrm
        lastmonth = yrm

        meeturl = makemeeturl(row[fedidx], row[dateidx], row[meetnameidx])

        print('<tr>')
        print('<td>%s</td>' % row[fedidx])
        print('<td><a href="%s">%s</a></td>' % (meeturl, date))
        print('<td>%s</td>' % location)
        print('<td>%s</td>' % row[townidx])
        print('<td class="meetname"><a href="%s">%s</a></td>' % (meeturl, row[meetnameidx]))
        print('<td>%d</td>' % len(names))
        print('<td>%s</td>' % lifterhtml)
        print('<td>%s</td>' % bestwilks)
        print('</tr>')

    print('</tbody>')
    print('</table>')


if __name__ == '__main__':
    main()
