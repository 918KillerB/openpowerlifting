#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Generates a static table of meet information.
#

import oplcsv
import sys

LIFTERSCSV = '../build/openpowerlifting.csv'
MEETCSV = '../build/meets.csv'


def main():
    csv = oplcsv.Csv(MEETCSV)

    meetidx = csv.fieldnames.index('MeetID')
    fedidx = csv.fieldnames.index('Federation')
    dateidx = csv.fieldnames.index('Date')
    countryidx = csv.fieldnames.index('MeetCountry')
    stateidx = csv.fieldnames.index('MeetState')
    townidx = csv.fieldnames.index('MeetTown')
    meetnameidx = csv.fieldnames.index('MeetName')

    # By default, sort the list by date, most recent meets first.
    csv.rows = sorted(csv.rows, key=lambda x : x[dateidx], reverse=True)

    lifters = oplcsv.Csv(LIFTERSCSV)
    liftersmeetidx = lifters.fieldnames.index('MeetID')
    lifterswilksidx = lifters.fieldnames.index('Wilks')
    liftersnameidx = lifters.fieldnames.index('Name')

    print('<table>')
    print('<thead>')
    print('<tr><td>Federation</td><td>Date</td><td>Country</td><td>Name</td><td>Lifters</td>')
    print('<td>Best Lifter</td><td>Best Wilks</td></tr>')
    print('</thead>')
    print('<tbody>')
    for row in csv.rows:
        # How many lifters competed?
        # XXX FIXME This is very slow! Could just use binary search, since meetid is linear.
        results = filter(lambda x : x[liftersmeetidx] == row[meetidx], lifters.rows)
        results = sorted(results, key=lambda x : float(x[lifterswilksidx] or 0.0), reverse=True)

        # TODO: Might need Best Raw (incl/wraps) / Best Geared (incl/multi).

        print('<tr>')
        print('<td>%s</td>' % row[fedidx])
        print('<td>%s</td>' % row[dateidx])
        print('<td>%s</td>' % row[countryidx])
        print('<td>%s</td>' % row[meetnameidx])
        print('<td>%d</td>' % len(results))
        print('<td>%s</td>' % results[0][liftersnameidx])
        print('<td>%s</td>' % results[0][lifterswilksidx])
        print('</tr>')

    print('</tbody>')
    print('</table>')


if __name__ == '__main__':
    main()
