#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Generates a lifterrank.js table file from openpowerlifting.csv,
# containing precomputed rankings of each lifter in various categories.
#
# The lifterrank.js file is then used by lifters.html to show record/ranking
# information. This cannot be done client-side, because it would take too long.
#

import oplcsv
import sys


# Get list of unique names in the CSV file.
def getnamedict(csv):
    nameidx = csv.fieldnames.index('Name')
    namedict = {} # When using a dictionary, the key order will be pseudo-random each run. Is OK.
    for row in csv.rows:
        name = row[nameidx]
        if not name in namedict:
            namedict[name] = True
    return namedict


def main():
    csv = oplcsv.Csv('../build/openpowerlifting.csv')

    # Convert the fields we care about to float.
    # Better to do this only once at the top than everywhere else in the file.
    for field in ['BestSquatKg', 'Squat4Kg', 'BestBenchKg', 'Bench4Kg', 'BestDeadliftKg',
                  'Deadlift4Kg', 'TotalKg', 'Wilks', 'BodyweightKg']:
        idx = csv.fieldnames.index(field)
        for row in csv.rows:
            try:
                row[idx] = float(row[idx])
            except ValueError:
                row[idx] = 0

    # First, a hack: have the Best column integrate 4th attempts.
    # This is OK for this file since we aren't displaying actual numbers.
    for lift in ['Squat', 'Bench', 'Deadlift']:
        bestidx    = csv.fieldnames.index('Best%sKg' % lift)
        fourthidx  = csv.fieldnames.index('%s4Kg' % lift)

        for row in csv.rows:
            best = row[bestidx]
            fourth = row[fourthidx]
            if fourth > best:
                row[bestidx] = fourth

    # Get sorted variants of the rows.
    # We can use filter on these to extract weightclass information.
    squatidx       = csv.fieldnames.index('BestSquatKg')
    benchidx       = csv.fieldnames.index('BestBenchKg')
    deadliftidx    = csv.fieldnames.index('BestDeadliftKg')
    totalidx       = csv.fieldnames.index('TotalKg')
    wilksidx       = csv.fieldnames.index('Wilks')

    nameidx        = csv.fieldnames.index('Name')
    equipidx       = csv.fieldnames.index('Equipment')
    bodyweightidx  = csv.fieldnames.index('BodyweightKg')
    sexidx         = csv.fieldnames.index('Sex')

    bysquat     = sorted(csv.rows, key=lambda x : x[squatidx], reverse=True)
    bybench     = sorted(csv.rows, key=lambda x : x[benchidx], reverse=True)
    bydeadlift  = sorted(csv.rows, key=lambda x : x[deadliftidx], reverse=True)
    bytotal     = sorted(csv.rows, key=lambda x : x[totalidx], reverse=True)
    bywilks     = sorted(csv.rows, key=lambda x : x[wilksidx], reverse=True)

    rankcsv = oplcsv.Csv()
    rankcsv.append_column('Name')

    # Create a row from each name, and have the namedict point from name to row.
    namedict = getnamedict(csv)
    for name in namedict.keys():
        rankcsv.rows.append([name])
        namedict[name] = rankcsv.rows[-1]

    # Assign everyone their per-equipment overall Wilks rank.
    rankcsv.append_columns(['WilksRankRaw','WilksRankWraps','WilksRankSingle','WilksRankMulti'])
    rawidx     = rankcsv.fieldnames.index('WilksRankRaw')
    wrapsidx   = rankcsv.fieldnames.index('WilksRankWraps')
    singleidx  = rankcsv.fieldnames.index('WilksRankSingle')
    multiidx   = rankcsv.fieldnames.index('WilksRankMulti')

    mapping  = ['Raw', 'Wraps', 'Single-ply', 'Multi-ply']
    indices  = [rawidx, wrapsidx, singleidx, multiidx]
    ranks    = [1, 1, 1, 1]

    for entry in bywilks:
        if entry[wilksidx] <= 0:
            continue

        try:
            k = mapping.index(entry[equipidx])
        except:
            continue

        # FIXME: XXX: Lifters with the same Wilks should get the same rank.
        # FIXME: XXX: Or by bw, then by date, but that's harder.
        row = namedict[entry[nameidx]]
        idx = indices[k]
        if not row[idx]:
            row[idx] = str(ranks[k])
            ranks[k] = ranks[k] + 1

    # Tuples of (exclusive lower bound weight, inclusive upper bound weight, sex).
    F = 'F'
    M = 'M'
    sexdivisions = [(1,44,F), (44,48,F), (48,52,F), (52,56,F), (56,60,F), (60,67.5,F),
                    (67.5,75,F), (75,82.5,F), (82.5,90,F), (90,999,F),
                    (1,52,M), (52,56,M), (56,60,M), (60,67.5,M), (67.5,75,M), (75,82.5,M),
                    (82.5,90,M), (90,100,M), (100,110,M), (110,125,M), (125,140,M), (140,999,M)]

    # Assign everyone their per-sex-division per-equipment Total rank.
    sexdivcols = ['Total%s%s' % (x[1],x[2]) for x in sexdivisions]
    totalcols = [y for x in sexdivcols for y in ['%sRaw'%x,'%sWraps'%x,'%sSingle'%x,'%sMulti'%x]]

    nprevcols = len(rankcsv.fieldnames)
    rankcsv.append_columns(totalcols)

    ranks = [1 for x in range(len(rankcsv.fieldnames))] # Easier to use column ID.

    def matchsexdivision(bw, sex):
        # Returns the index into sexdivisions or throws an error if not found.
        for i,t in enumerate(sexdivisions):
            if bw >= t[0] and bw < t[1] and sex == t[2]:
                return i
        raise LookupError

    for entry in bytotal:
        if entry[totalidx] <= 0:
            continue

        # Figure out which column is being used for this entry.
        try:
            # First, find out the right entry in sexdivisions.
            bw = entry[bodyweightidx]
            sex = entry[sexidx]
            equip = entry[equipidx]
            if not bw or not sex or not equip:
                continue

            # Get the index into the sexdivision.
            i = matchsexdivision(bw, sex)

            rankidx = i
            colidx = rankcsv.fieldnames.index('Total%s%s%s' %
                    (sexdivisions[i][1],sexdivisions[i][2],equip.replace('-ply','')))
        except:
            continue

        # FIXME: XXX: Lifters with the same total should get the same rank.
        # FIXME: XXX: Or by bw, then by date, but that's harder.
        row = namedict[entry[nameidx]]
        if not row[colidx]:
            row[colidx] = str(ranks[colidx])
            ranks[colidx] = ranks[colidx] + 1


    rankcsv.write(sys.stdout)


if __name__ == '__main__':
    main()
